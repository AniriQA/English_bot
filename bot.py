import logging
import os
import random
import json
import asyncio
from typing import Dict, Tuple

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∑–∞–¥–∞—ë—Ç—Å—è –≤ Render ‚Üí Environment
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
if os.path.exists(WORDS_FILE):
    try:
        with open(WORDS_FILE, "r", encoding="utf-8") as f:
            words: Dict[str, str] = json.load(f)
    except Exception:
        logging.exception("Can't load words.json, starting with empty dict")
        words = {}
else:
    words = {}  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "english": "—Ä—É—Å—Å–∫–∏–π" }

# ------------------ –°–û–•–†–ê–ù–ï–ù–ò–ï ------------------
def save_words():
    try:
        with open(WORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=2)
    except Exception:
        logging.exception("Failed to save words.json")

# ------------------ –°–¢–ê–¢–´/–°–õ–£–ñ–ï–ë–ù–´–ï –°–õ–û–í–ê–†–ò ------------------
adding_word_users = set()  # user_id –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ (–æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç "eng-rus")
current_quiz: Dict[int, Tuple[str, str, bool]] = {}  # {user_id: (eng, rus, reverse)}

# ------------------ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† ------------------
def main_menu_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="cmd:add"),
        InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="cmd:list"),
        InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)", callback_data="cmd:quiz"),
        InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)", callback_data="cmd:quiz_reverse"),
    )
    return kb

def list_words_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å–ª–æ–≤–æ (callback —É–¥–∞–ª–µ–Ω–∏–µ)
    for eng, rus in words.items():
        kb.add(
            InlineKeyboardButton(text=f"{eng} ‚Üí {rus}", callback_data=f"show:{eng}"),
            InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{eng}")
        )
    return kb

def quiz_options_kb(options):
    kb = InlineKeyboardMarkup(row_width=2)
    for opt in options:
        # callback_data —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ—Ñ–∏–∫—Å answer:
        kb.add(InlineKeyboardButton(text=opt, callback_data=f"answer:{opt}"))
    return kb

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ (inline)."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command(commands=["add"]))
async def cmd_add(message: Message):
    adding_word_users.add(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")

@dp.message(Command(commands=["list"]))
async def cmd_list(message: Message):
    if not words:
        await message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.")
        return
    await message.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å):", reply_markup=list_words_kb())

@dp.message(Command(commands=["quiz"]))
async def cmd_quiz(message: Message):
    await send_quiz(message, reverse=False)

@dp.message(Command(commands=["quiz_reverse"]))
async def cmd_quiz_reverse(message: Message):
    await send_quiz(message, reverse=True)

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
@dp.message(F.text)
async def text_router(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # 1) –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ
    if user_id in adding_word_users:
        if "-" not in text:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ)")
            return
        eng, rus = text.split("-", 1)
        eng = eng.strip()
        rus = rus.strip()
        if not eng or not rus:
            await message.answer("–ü—É—Å—Ç–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.")
            return
        words[eng] = rus
        save_words()
        adding_word_users.discard(user_id)
        await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_menu_kb())
        return

    # 2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç –∫–≤–∏–∑ –∏ –æ–Ω –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏ (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º –æ–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞)
    if user_id in current_quiz:
        eng, rus, reverse = current_quiz[user_id]
        user_answer = text
        correct = rus if not reverse else eng
        if user_answer == correct:
            await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'", reply_markup=main_menu_kb())
        else:
            await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'\n–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.", reply_markup=main_menu_kb())
            if not reverse and eng in words:
                del words[eng]
                save_words()
        del current_quiz[user_id]
        return

    # 3) –Ω–∏–∫–∞–∫–æ–π —Ä–µ–∂–∏–º ‚Äî –∏–≥–Ω–æ—Ä –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞
    await message.answer("–ù–µ –ø–æ–Ω—è–ª. –ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é /start –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.", reply_markup=main_menu_kb())

# ------------------ –ö–í–ò–ó ------------------
async def send_quiz(message: Message, reverse: bool = False):
    if len(words) < 2:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞! –ò—Å–ø–æ–ª—å–∑—É–π /add.")
        return

    eng = random.choice(list(words.keys()))
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    # —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å—Ç—Ä–æ–∫–∏)
    while len(options) < 4:
        w = random.choice(list(words.keys()))
        val = w if reverse else words[w]
        if val not in options:
            options.append(val)
    random.shuffle(options)

    question = eng if not reverse else rus

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: <b>{question}</b>", reply_markup=quiz_options_kb(options))
    # –æ–∑–≤—É—á–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–µ—Å–ª–∏ –ø—Ä—è–º–æ–π –∫–≤–∏–∑)
    if not reverse:
        try:
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            filename = f"word_{message.from_user.id}.mp3"
            tts = gTTS(text=eng, lang='en')
            tts.save(filename)
            await message.answer_voice(InputFile(filename))
            try:
                os.remove(filename)
            except Exception:
                pass
        except Exception as e:
            logging.exception("TTS failed: %s", e)

    current_quiz[message.from_user.id] = (eng, rus, reverse)

# ------------------ CALLBACKS (–∫–Ω–æ–ø–∫–∏) ------------------
@dp.callback_query(F.data.startswith("cmd:"))
async def cmd_buttons_handler(callback: CallbackQuery):
    cmd = callback.data.split(":", 1)[1]

    # –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –æ–∂–∏–¥–∞—é—Ç "Message", –º—ã –ù–ï –ø–µ—Ä–µ–¥–∞—ë–º callback.message –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∑–∞–º–µ–Ω—ã
    # –∞ –¥–µ–π—Å—Ç–≤—É–µ–º –æ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É—é—â–µ–≥–æ callback.from_user
    if cmd == "add":
        # –ø–æ–º–µ—Ç–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –¥–æ–±–∞–≤–ª—è—é—â–µ–≥–æ —Å–ª–æ–≤–æ
        adding_word_users.add(callback.from_user.id)
        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Å–∫–∞–∑–∫—É –≤ —Ç–æ—Ç —á–∞—Ç, –≥–¥–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–∏–ª–∏ –≤ –ª–∏—á–∫—É)
        try:
            # –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç ‚Äî –æ—Ç–≤–µ—Ç–∏–º —Ç–∞–º, –∏–Ω–∞—á–µ –æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –õ–°
            if callback.message.chat.type == "private":
                await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
            else:
                # –æ—Ç–ø—Ä–∞–≤–∏–º –ª–∏—á–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ª—É—á—à–µ ‚Äî —á—Ç–æ–±—ã –æ–Ω –ø–∏—Å–∞–ª –≤ –ª–∏—á–∫–µ)
                await bot.send_message(callback.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
                await callback.message.answer("–Ø –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–±–µ –≤ –ª–∏—á–∫—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
        except Exception:
            # fallback: –æ—Ç–ø—Ä–∞–≤–∏–º –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
            await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
    elif cmd == "list":
        # –ø–æ–∫–∞–∂–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
        if not words:
            await callback.message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! /add —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ.")
        else:
            await callback.message.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å):", reply_markup=list_words_kb())
    elif cmd == "quiz":
        # –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–≤–∏–∑ ‚Äî —Å–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤–æ–µ Message-like –ø–æ–≤–µ–¥–µ–Ω–∏–µ? –ø—Ä–æ—â–µ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ —Ç–æ—Ç –∂–µ —á–∞—Ç
        await send_quiz(callback.message, reverse=False)
    elif cmd == "quiz_reverse":
        await send_quiz(callback.message, reverse=True)

    await callback.answer()

@dp.callback_query(F.data.startswith("answer:"))
async def answer_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /quiz –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–≤–∏–∑' –≤ –º–µ–Ω—é.", show_alert=True)
        return

    eng, rus, reverse = current_quiz[user_id]
    user_answer = callback.data.split(":", 1)[1]
    correct = rus if not reverse else eng

    if user_answer == correct:
        await callback.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'", reply_markup=main_menu_kb())
    else:
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'\n–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.", reply_markup=main_menu_kb())
        if not reverse and eng in words:
            del words[eng]
            save_words()

    del current_quiz[user_id]
    await callback.answer()

@dp.callback_query(F.data.startswith("show:"))
async def show_word_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        await callback.message.answer(f"{eng} ‚Üí {words[eng]}")
    else:
        await callback.message.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()

@dp.callback_query(F.data.startswith("del:"))
async def delete_word_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        del words[eng]
        save_words()
        await callback.message.answer(f"üóëÔ∏è –°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await callback.message.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()

# ------------------ HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ------------------
async def handle(request):
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logging.info("Web server started on port %s", port)

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-–∑–∞–≥–ª—É—à–∫—É –∏ polling
    await start_web_server()
    logging.info("Starting polling...")
    try:
        await dp.start_polling(bot)
    finally:
        # –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –±–æ—Ç–∞
        try:
            await bot.session.close()
        except Exception:
            pass

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        pass
