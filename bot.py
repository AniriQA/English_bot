#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤
"""

import logging
import os
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler,
    CallbackQueryHandler
)
from bs4 import BeautifulSoup

from database import VocabularyDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = VocabularyDatabase()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_WORD, DELETING_WORD, QUIZ_EN_RU, QUIZ_RU_EN = range(4)

# –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∫–≤–∏–∑–æ–≤
user_quiz_data = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å")],
        [KeyboardButton("‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª-—Ä—É—Å"), KeyboardButton("‚è∞ –ö–≤–∏–∑ —Ä—É—Å-–∞–Ω–≥–ª")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
        [KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
def back_to_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞!

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞  
‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª-—Ä—É—Å - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è
‚è∞ –ö–≤–∏–∑ —Ä—É—Å-–∞–Ω–≥–ª - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - –≤–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
‚ùì –ü–æ–º–æ—â—å - —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º

üìù **–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
–ü—Ä–∏–º–µ—Ä: hello-–ø—Ä–∏–≤–µ—Ç
    """
    await update.message.reply_text(welcome_text, reply_markup=main_menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"
üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–ª–æ–≤–∞
‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª-—Ä—É—Å - —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
‚è∞ –ö–≤–∏–∑ —Ä—É—Å-–∞–Ω–≥–ª - —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üí° **–°–æ–≤–µ—Ç:** –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"!
    """
    await update.message.reply_text(help_text, reply_markup=main_menu_keyboard())

async def add_word_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"""
    await update.message.reply_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>hello-–ø—Ä–∏–≤–µ—Ç</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>to learn-—É—á–∏—Ç—å</code>\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã",
        parse_mode='HTML',
        reply_markup=back_to_menu_keyboard()
    )
    return ADDING_WORD

async def add_word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    success, message = await process_word_addition(user_id, text)
    await update.message.reply_text(message, reply_markup=main_menu_keyboard())
    return ConversationHandler.END

async def process_word_addition(user_id: int, text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    try:
        clean_text = clean_html(text)
        
        if '-' not in clean_text:
            return False, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä: hello-–ø—Ä–∏–≤–µ—Ç"
        
        word, translation = clean_text.split('-', 1)
        word = word.strip()
        translation = translation.strip()
        
        if not word or not translation:
            return False, "‚ùå **–ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥!**\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."
        
        success = db.add_word(user_id, word, translation)
        
        if success:
            return True, f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n{word} - {translation}"
        else:
            return False, "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            
    except Exception as e:
        logger.error(f"Error processing word addition: {e}")
        return False, "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."

async def show_vocabulary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_text(
            "üìù **–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç**\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞!",
            reply_markup=main_menu_keyboard()
        )
        return
    
    word_list = "\n".join([f"‚Ä¢ **{word}** - {trans}" for word, trans in words[:30]])
    stats = db.get_user_stats(user_id)
    
    response = f"üìö **–í–∞—à —Å–ª–æ–≤–∞—Ä—å** ({stats['total_words']} —Å–ª–æ–≤)\n\n{word_list}"
    
    if len(words) > 30:
        response += f"\n\n... –∏ –µ—â—ë {len(words) - 30} —Å–ª–æ–≤"
    
    await update.message.reply_text(response, reply_markup=main_menu_keyboard())

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
    user_id = update.effective_user.id
    stats = db.get_user_stats(user_id)
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: **{stats['total_words']}**
üî§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: **{stats['unique_words']}**

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
    """
    await update.message.reply_text(stats_text, reply_markup=main_menu_keyboard())

async def delete_word_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ"""
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_text(
            "üìù **–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç**\n–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!",
            reply_markup=main_menu_keyboard()
        )
        return
    
    word_list = "\n".join([f"‚Ä¢ {word}" for word, trans in words[:20]])
    await update.message.reply_text(
        f"üóëÔ∏è **–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:**\n\n{word_list}\n\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=back_to_menu_keyboard()
    )
    return DELETING_WORD

async def delete_word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
    user_id = update.effective_user.id
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    word_to_delete = text.strip()
    success = db.delete_word(user_id, word_to_delete)
    
    if success:
        await update.message.reply_text(f"‚úÖ **–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!**\n{word_to_delete}", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text(f"‚ùå **–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!**\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.", reply_markup=main_menu_keyboard())
    
    return ConversationHandler.END

async def start_quiz_en_ru(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∫–≤–∏–∑ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π-—Ä—É—Å—Å–∫–∏–π"""
    user_id = update.effective_user.id
    
    if db.get_word_count(user_id) < 4:
        await update.message.reply_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞!**\n–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 4 —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    await send_quiz_question(update, user_id, "en_ru")
    return QUIZ_EN_RU

async def start_quiz_ru_en(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞—Ç—å –∫–≤–∏–∑ —Ä—É—Å—Å–∫–∏–π-–∞–Ω–≥–ª–∏–π—Å–∫–∏–π"""
    user_id = update.effective_user.id
    
    if db.get_word_count(user_id) < 4:
        await update.message.reply_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞!**\n–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 4 —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.",
            reply_markup=main_menu_keyboard()
        )
        return
    
    await send_quiz_question(update, user_id, "ru_en")
    return QUIZ_RU_EN

async def send_quiz_question(update: Update, user_id: int, quiz_type: str):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
    words = db.get_random_words_for_quiz(user_id, 4)
    
    if len(words) < 4:
        await update.message.reply_text(
            "‚ùå **–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞!**",
            reply_markup=main_menu_keyboard()
        )
        return
    
    correct_word, correct_translation = random.choice(words)
    
    if quiz_type == "en_ru":
        question = f"üìù **–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:**\n**{correct_word}**"
        options = [trans for _, trans in words]
        correct_answer = correct_translation
    else:  # ru_en
        question = f"üìù **–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:**\n**{correct_translation}**"
        options = [word for word, _ in words]
        correct_answer = correct_word
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    random.shuffle(options)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    user_quiz_data[user_id] = {
        'correct_answer': correct_answer,
        'quiz_type': quiz_type
    }
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    keyboard = []
    for option in options:
        keyboard.append([KeyboardButton(option)])
    keyboard.append([KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    
    await update.message.reply_text(question, reply_markup=reply_markup)

async def quiz_answer_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_state: int):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–≤–∏–∑–µ"""
    user_id = update.effective_user.id
    user_answer = update.message.text
    
    if user_answer == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        if user_id in user_quiz_data:
            del user_quiz_data[user_id]
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    if user_id not in user_quiz_data:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–≤–∏–∑–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    correct_answer = user_quiz_data[user_id]['correct_answer']
    quiz_type = user_quiz_data[user_id]['quiz_type']
    
    if user_answer == correct_answer:
        response = "‚úÖ **–í–µ—Ä–Ω–æ!** üéâ"
    else:
        if quiz_type == "en_ru":
            response = f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ!**\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **{correct_answer}**"
        else:
            response = f"‚ùå **–ù–µ–≤–µ—Ä–Ω–æ!**\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: **{correct_answer}**"
    
    await update.message.reply_text(response)
    
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_quiz_question(update, user_id, quiz_type)
    return quiz_state

async def quiz_en_ru_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–≤–∏–∑–∞ –∞–Ω–≥–ª-—Ä—É—Å"""
    return await quiz_answer_handler(update, context, QUIZ_EN_RU)

async def quiz_ru_en_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–≤–∏–∑–∞ —Ä—É—Å-–∞–Ω–≥–ª"""
    return await quiz_answer_handler(update, context, QUIZ_RU_EN)

async def handle_direct_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥)"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
    if '-' in text and len(text.split('-')) == 2:
        success, message = await process_word_addition(user_id, text)
        await update.message.reply_text(message, reply_markup=main_menu_keyboard())

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã"""
    user_id = update.effective_user.id
    if user_id in user_quiz_data:
        del user_quiz_data[user_id]
    
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

def clean_html(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤"""
    soup = BeautifulSoup(text, 'html.parser')
    return soup.get_text().strip()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    try:
        application = Application.builder().token(BOT_TOKEN).build()
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
        add_conversation = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ$"), add_word_button)],
            states={
                ADDING_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_word_handler)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        # ConversationHandler –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤
        delete_conversation = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ$"), delete_word_button)],
            states={
                DELETING_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_word_handler)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        # ConversationHandler –¥–ª—è –∫–≤–∏–∑–∞ –∞–Ω–≥–ª-—Ä—É—Å
        quiz_en_ru_conversation = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª-—Ä—É—Å$"), start_quiz_en_ru)],
            states={
                QUIZ_EN_RU: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_en_ru_handler)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        # ConversationHandler –¥–ª—è –∫–≤–∏–∑–∞ —Ä—É—Å-–∞–Ω–≥–ª
        quiz_ru_en_conversation = ConversationHandler(
            entry_points=[MessageHandler(filters.Regex("^‚è∞ –ö–≤–∏–∑ —Ä—É—Å-–∞–Ω–≥–ª$"), start_quiz_ru_en)],
            states={
                QUIZ_RU_EN: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_ru_en_handler)]
            },
            fallbacks=[CommandHandler("cancel", cancel)]
        )
        
        # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(MessageHandler(filters.Regex("^üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å$"), show_vocabulary))
        application.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), show_stats))
        application.add_handler(MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), handle_main_menu))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_direct_message))
        
        # Conversation handlers
        application.add_handler(add_conversation)
        application.add_handler(delete_conversation)
        application.add_handler(quiz_en_ru_conversation)
        application.add_handler(quiz_ru_en_conversation)
        
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
