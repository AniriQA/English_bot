import logging
import os
import random
import json
import asyncio
from typing import Dict, Tuple

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")
WORDS_FILE = "words.json"

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –°–õ–û–í–ê–†–¨ ------------------
def load_words():
    global words
    try:
        if os.path.exists(WORDS_FILE):
            with open(WORDS_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
            logger.info(f"üìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(words)}")
        else:
            words = {
                "hello": "–ø—Ä–∏–≤–µ—Ç",
                "task": "–∑–∞–¥–∞—á–∞", 
                "project": "–ø—Ä–æ–µ–∫—Ç",
                "team": "–∫–æ–º–∞–Ω–¥–∞"
            }
            with open(WORDS_FILE, "w", encoding="utf-8") as f:
                json.dump(words, f, ensure_ascii=False, indent=2)
            logger.info("üìö –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        words = {}

def save_words():
    try:
        with open(WORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ------------------ –°–û–°–¢–û–Ø–ù–ò–Ø ------------------
adding_word_users = set()
current_quiz: Dict[int, Tuple[str, str, bool]] = {}

load_words()

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ ------------------
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"),
            InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", callback_data="list")
        ],
        [
            InlineKeyboardButton(text="üéØ –ö–≤–∏–∑ –∞–Ω–≥–ª‚Üí—Ä—É—Å", callback_data="quiz"),
            InlineKeyboardButton(text="üéØ –ö–≤–∏–∑ —Ä—É—Å‚Üí–∞–Ω–≥–ª", callback_data="quiz_reverse")
        ]
    ])

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –±–æ—Ç\n–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(Command("status"))  
async def status_cmd(message: Message):
    await message.answer(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\nüìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(words)}")

# ------------------ –¢–ï–ö–°–¢ ------------------
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in adding_word_users:
        if "-" in text:
            eng, rus = text.split("-", 1)
            eng, rus = eng.strip().lower(), rus.strip().lower()
            if eng and rus:
                words[eng] = rus
                save_words()
                adding_word_users.discard(user_id)
                await message.answer(
                    f"‚úÖ '{eng}' ‚Üí '{rus}'\nüìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}",
                    reply_markup=main_menu()
                )
                return
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç: apple-—è–±–ª–æ–∫–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        return

    await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ------------------ CALLBACKS ------------------
@dp.callback_query(F.data == "add")
async def add_callback(callback: CallbackQuery):
    adding_word_users.add(callback.from_user.id)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥:\n–ü—Ä–∏–º–µ—Ä: <code>database-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</code>"
    )
    await callback.answer()

@dp.callback_query(F.data == "list")
async def list_callback(callback: CallbackQuery):
    if not words:
        await callback.message.edit_text("üìö –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        await callback.answer()
        return
    
    text = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
    for eng, rus in list(words.items())[:15]:
        text += f"‚Ä¢ <b>{eng}</b> - {rus}\n"
    
    await callback.message.edit_text(text)
    await callback.answer()

@dp.callback_query(F.data.startswith("quiz"))
async def quiz_callback(callback: CallbackQuery):
    if len(words) < 2:
        await callback.message.edit_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞!")
        await callback.answer()
        return
    
    reverse = callback.data == "quiz_reverse"
    eng = random.choice(list(words.keys()))
    rus = words[eng]
    
    correct = rus if not reverse else eng
    options = [correct]
    
    while len(options) < 4:
        word = random.choice(list(words.keys()))
        option = words[word] if not reverse else word
        if option not in options and option != correct:
            options.append(option)
    
    random.shuffle(options)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for opt in options:
        kb.inline_keyboard.append([InlineKeyboardButton(text=opt, callback_data=f"ans:{opt}")])
    
    question = eng if not reverse else rus
    await callback.message.edit_text(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥:\n<b>{question}</b>",
        reply_markup=kb
    )
    
    current_quiz[callback.from_user.id] = (eng, rus, reverse)
    await callback.answer()

@dp.callback_query(F.data.startswith("ans:"))
async def answer_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("‚ùå –ö–≤–∏–∑ —É—Å—Ç–∞—Ä–µ–ª")
        return
    
    user_ans = callback.data.split(":", 1)[1]
    eng, rus, reverse = current_quiz[user_id]
    correct = rus if not reverse else eng
    
    if user_ans == correct:
        response = f"‚úÖ –í–µ—Ä–Ω–æ!\n<b>{eng}</b> - {rus}"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n‚úÖ <b>{eng}</b> - {rus}"
    
    del current_quiz[user_id]
    await callback.message.edit_text(response, reply_markup=main_menu())
    await callback.answer()

# ------------------ WEB SERVER ------------------
async def health_check(request):
    return web.Response(text="ü§ñ Bot is running!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    # üî• –í–ê–ñ–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8080 –¥–ª—è Render
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"üåê Web server started on port {port}")
    return app

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    logger.info("üöÄ Starting bot...")
    
    # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook reset")
        await asyncio.sleep(2)
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    await start_web_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ Starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
