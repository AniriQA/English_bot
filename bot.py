#!/usr/bin/env python3
import logging
import os
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from bs4 import BeautifulSoup

from database import VocabularyDatabase

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)
logger = logging.getLogger(__name__)

db = VocabularyDatabase()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADDING_WORD, DELETING_WORD, QUIZ = range(3)
user_quiz = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("üìö –°–ª–æ–≤–∞—Ä—å")],
        [KeyboardButton("‚è∞ –ö–≤–∏–∑"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("‚ùì –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def back_keyboard():
    return ReplyKeyboardMarkup([[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]], resize_keyboard=True)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ!",
        reply_markup=main_keyboard()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìù –î–æ–±–∞–≤–ª—è–π —Å–ª–æ–≤–∞: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥\n"
        "üìö –°–ª–æ–≤–∞—Ä—å - –≤—Å–µ —Ç–≤–æ–∏ —Å–ª–æ–≤–∞\n"
        "‚è∞ –ö–≤–∏–∑ - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–Ω–∞–Ω–∏—è\n"
        "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å - —É–±—Ä–∞—Ç—å —Å–ª–æ–≤–æ\n"
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ - —Ç–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
        reply_markup=main_keyboard()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
async def add_word_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:\n–ü—Ä–∏–º–µ—Ä: hello-–ø—Ä–∏–≤–µ—Ç",
        reply_markup=back_keyboard()
    )
    return ADDING_WORD

async def add_word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    if '-' in text:
        try:
            word, trans = text.split('-', 1)
            user_id = update.effective_user.id
            if db.add_word(user_id, word.strip(), trans.strip()):
                await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {word.strip()} - {trans.strip()}", reply_markup=main_keyboard())
            else:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞", reply_markup=main_keyboard())
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥", reply_markup=main_keyboard())
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
async def show_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_text("üìù –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç", reply_markup=main_keyboard())
        return
    
    word_list = "\n".join([f"‚Ä¢ {w} - {t}" for w, t in words])
    await update.message.reply_text(f"üìö –¢–≤–æ–∏ —Å–ª–æ–≤–∞:\n{word_list}", reply_markup=main_keyboard())

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤
async def delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_text("üìù –ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    word_list = "\n".join([f"‚Ä¢ {w}" for w, t in words[:10]])
    await update.message.reply_text(
        f"üóëÔ∏è –ö–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–∏—Ç—å?\n{word_list}\n\n–ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:",
        reply_markup=back_keyboard()
    )
    return DELETING_WORD

async def delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    if db.delete_word(user_id, text.strip()):
        await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: {text}", reply_markup=main_keyboard())
    else:
        await update.message.reply_text("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", reply_markup=main_keyboard())
    
    return ConversationHandler.END

# –ö–≤–∏–∑
async def quiz_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if db.get_word_count(user_id) < 2:
        await update.message.reply_text("‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    words = db.get_random_words(user_id, 4)
    if len(words) < 2:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    # –°–æ–∑–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å
    question_word, answer = random.choice(words)
    user_quiz[user_id] = answer
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã
    options = [t for w, t in words]
    random.shuffle(options)
    
    keyboard = [[KeyboardButton(opt)] for opt in options] + [[KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]]
    
    await update.message.reply_text(
        f"üìù –ü–µ—Ä–µ–≤–µ–¥–∏: {question_word}",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )
    return QUIZ

async def quiz_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_quiz.pop(user_id, None)
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())
        return ConversationHandler.END
    
    if user_id in user_quiz:
        correct = user_quiz[user_id]
        if text == correct:
            await update.message.reply_text("‚úÖ –í–µ—Ä–Ω–æ! üéâ")
        else:
            await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω–æ: {correct}")
        
        # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å
        return await quiz_start(update, context)
    
    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–≤–∏–∑–∞", reply_markup=main_keyboard())
    return ConversationHandler.END

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = db.get_word_count(user_id)
    await update.message.reply_text(f"üìä –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {count}", reply_markup=main_keyboard())

# –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
async def direct_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id
    
    if '-' in text and len(text.split('-')) == 2:
        word, trans = text.split('-', 1)
        if db.add_word(user_id, word.strip(), trans.strip()):
            await update.message.reply_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {word.strip()} - {trans.strip()}", reply_markup=main_keyboard())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_keyboard())

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_keyboard())
    return ConversationHandler.END

def main():
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Conversation handlers
    add_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ$"), add_word_start)],
        states={ADDING_WORD: [MessageHandler(filters.TEXT, add_word_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    del_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ$"), delete_start)],
        states={DELETING_WORD: [MessageHandler(filters.TEXT, delete_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    quiz_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è∞ –ö–≤–∏–∑$"), quiz_start)],
        states={QUIZ: [MessageHandler(filters.TEXT, quiz_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # Handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.Regex("^üìö –°–ª–æ–≤–∞—Ä—å$"), show_words))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats))
    app.add_handler(MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), main_menu))
    app.add_handler(add_conv)
    app.add_handler(del_conv)
    app.add_handler(quiz_conv)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, direct_message))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
