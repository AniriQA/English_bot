import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.utils.keyboard import InlineKeyboardBuilder

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)

TOKEN = os.getenv("BOT_TOKEN")  # –î–æ–±–∞–≤—å BOT_TOKEN –≤ Secrets Replit –∏–ª–∏ .env
bot = Bot(token=TOKEN)
dp = Dispatcher()


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üìò –£—Ä–æ–∫–∏", callback_data="lessons")
    kb.button(text="üéß –ê—É–¥–∏–æ", callback_data="audio")
    kb.button(text="üìù –¢–µ—Å—Ç—ã", callback_data="tests")
    kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
    kb.adjust(2)
    return kb.as_markup()


def lessons_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç", callback_data="lesson_abc")
    kb.button(text="üïí –í—Ä–µ–º—è", callback_data="lesson_time")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(1)
    return kb.as_markup()


def settings_kb():
    kb = InlineKeyboardBuilder()
    kb.button(text="üåó –¢–µ–º–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞", callback_data="theme")
    kb.button(text="üåç –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="lang")
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_main")
    kb.adjust(1)
    return kb.as_markup()


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
@dp.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üëã\n"
        "–Ø —É—á–µ–±–Ω—ã–π –±–æ—Ç –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—É.\n"
        "–í—ã–±–µ—Ä–∏ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=main_menu_kb()
    )


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@dp.callback_query(F.data == "lessons")
async def cb_lessons(callback: types.CallbackQuery):
    await callback.message.edit_text("üìò –í—ã–±–µ—Ä–∏ —É—Ä–æ–∫:", reply_markup=lessons_kb())


@dp.callback_query(F.data == "audio")
async def cb_audio(callback: types.CallbackQuery):
    await callback.message.edit_text("üéß –†–∞–∑–¥–µ–ª –∞—É–¥–∏–æ –ø–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu_kb())


@dp.callback_query(F.data == "tests")
async def cb_tests(callback: types.CallbackQuery):
    await callback.message.edit_text("üìù –†–∞–∑–¥–µ–ª —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu_kb())


@dp.callback_query(F.data == "settings")
async def cb_settings(callback: types.CallbackQuery):
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏:", reply_markup=settings_kb())


# --- –£—Ä–æ–∫–∏ ---
@dp.callback_query(F.data == "lesson_abc")
async def lesson_abc(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üî§ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç:\n\nA B C D E F G H I J K L M\nN O P Q R S T U V W X Y Z",
        reply_markup=lessons_kb()
    )


@dp.callback_query(F.data == "lesson_time")
async def lesson_time(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "üïí –ö–∞–∫ —Å–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º—è –ø–æ-–∞–Ω–≥–ª–∏–π—Å–∫–∏:\n\nIt's 5 o'clock ‚Äî –°–µ–π—á–∞—Å 5 —á–∞—Å–æ–≤.\n"
        "Half past six ‚Äî –ü–æ–ª–æ–≤–∏–Ω–∞ —Å–µ–¥—å–º–æ–≥–æ.",
        reply_markup=lessons_kb()
    )


# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
@dp.callback_query(F.data == "theme")
async def theme_change(callback: types.CallbackQuery):
    await callback.message.edit_text("üåó –í—ã–±–æ—Ä —Ç–µ–º—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=settings_kb())


@dp.callback_query(F.data == "lang")
async def lang_change(callback: types.CallbackQuery):
    await callback.message.edit_text("üåç –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —è–∑—ã–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=settings_kb())


# --- –ö–Ω–æ–ø–∫–∞ ¬´–ù–∞–∑–∞–¥¬ª ---
@dp.callback_query(F.data == "back_main")
async def back_to_main(callback: types.CallbackQuery):
    await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
@dp.errors()
async def errors_handler(update, exception):
    logging.error(f"–û—à–∏–±–∫–∞: {exception}")
    return True


# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
