import logging
import os
import random
import json
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")
WORDS_FILE = "words.json"

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –°–õ–û–í–ê–†–¨ ------------------
if os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "r", encoding="utf-8") as f:
        words = json.load(f)
else:
    words = {}

def save_words():
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

adding_word_users = set()
current_quiz = {}  # {user_id: (eng, rus, reverse)}

# ------------------ START ------------------
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [
        InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"),
        InlineKeyboardButton(text="üìñ –°–ª–æ–≤–∞—Ä—å", callback_data="list"),
        InlineKeyboardButton(text="üìù –ö–≤–∏–∑ (–∞–Ω–≥–ª‚Üí—Ä—É—Å)", callback_data="quiz"),
        InlineKeyboardButton(text="üìù –ö–≤–∏–∑ (—Ä—É—Å‚Üí–∞–Ω–≥–ª)", callback_data="quiz_reverse"),
    ]
    keyboard.add(*buttons)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

# ------------------ CALLBACKS ------------------
@dp.callback_query()
async def callback_handler(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    data = callback.data

    if data == "add":
        await bot.send_message(user_id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
        adding_word_users.add(user_id)

    elif data == "list":
        if not words:
            await bot.send_message(user_id, "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        else:
            reply = "\n".join([f"{eng} ‚Üí {rus}" for eng, rus in words.items()])
            await bot.send_message(user_id, reply)

    elif data == "quiz":
        await send_quiz(user_id, reverse=False)

    elif data == "quiz_reverse":
        await send_quiz(user_id, reverse=True)

    await callback.answer()

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
@dp.message()
async def receive_word(message: Message):
    if message.from_user.id not in adding_word_users:
        return
    text = message.text.strip()
    if "-" not in text:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π")
        return
    eng, rus = text.split("-", 1)
    eng = eng.strip()
    rus = rus.strip()
    words[eng] = rus
    save_words()
    await message.answer(f"–°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    adding_word_users.remove(message.from_user.id)

# ------------------ –ö–í–ò–ó ------------------
async def send_quiz(user_id: int, reverse=False):
    if len(words) < 2:
        await bot.send_message(user_id, "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!")
        return

    eng = random.choice(list(words.keys()))
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    while len(options) < 4:
        w = random.choice(list(words.keys()))
        val = w if reverse else words[w]
        if val not in options:
            options.append(val)
    random.shuffle(options)

    keyboard = InlineKeyboardMarkup(row_width=2)
    for opt in options:
        keyboard.add(InlineKeyboardButton(text=opt, callback_data=f"answer:{opt}:{eng}:{rus}:{reverse}"))

    question = eng if not reverse else rus
    await bot.send_message(user_id, f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {question}", reply_markup=keyboard)

    if not reverse:
        tts = gTTS(text=eng, lang='en')
        tts.save("word.mp3")
        await bot.send_voice(user_id, InputFile("word.mp3"))
        os.remove("word.mp3")

    current_quiz[user_id] = (eng, rus, reverse)

# ------------------ –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–û–í ------------------
@dp.callback_query(lambda c: c.data.startswith("answer:"))
async def answer_handler(callback: types.CallbackQuery):
    data = callback.data.split(":", 4)
    user_answer = data[1]
    eng = data[2]
    rus = data[3]
    reverse = data[4] == "True"
    user_id = callback.from_user.id

    correct = rus if not reverse else eng
    if user_answer == correct:
        await bot.send_message(user_id, f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'")
    else:
        await bot.send_message(user_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'\n–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.")
        if not reverse and eng in words:
            del words[eng]
            save_words()

    if user_id in current_quiz:
        del current_quiz[user_id]

    await callback.answer()

# ------------------ HTTP-–∑–∞–≥–ª—É—à–∫–∞ ------------------
async def handle(request):
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    await start_web_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
