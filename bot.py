import logging
import os
import random
import json
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ Render ‚Üí Environment
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
if os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "r", encoding="utf-8") as f:
        words = json.load(f)
else:
    words = {}  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "english": "—Ä—É—Å—Å–∫–∏–π" }

# ------------------ –°–û–•–†–ê–ù–ï–ù–ò–ï ------------------
def save_words():
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
adding_word_users = set()  # –∫—Ç–æ –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ

@dp.message(Command(commands=["add"]))
async def add_word(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
    adding_word_users.add(message.from_user.id)

@dp.message()
async def receive_word(message: Message):
    if message.from_user.id not in adding_word_users:
        return
    text = message.text.strip()
    if "-" not in text:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π")
        return
    eng, rus = text.split("-", 1)
    eng = eng.strip()
    rus = rus.strip()
    words[eng] = rus
    save_words()
    await message.answer(f"‚úÖ –°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    adding_word_users.remove(message.from_user.id)

# ------------------ –ü–†–û–°–ú–û–¢–† –°–õ–û–í–ê–†–Ø ------------------
@dp.message(Command(commands=["list"]))
async def list_words(message: Message):
    if not words:
        await message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        return

    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[])
    for eng, rus in words.items():
        keyboard.add(InlineKeyboardButton(text=f"{eng} ‚Üí {rus}", callback_data="noop"))
    
    await message.answer("–í–∞—à —Å–ª–æ–≤–∞—Ä—å:", reply_markup=keyboard)

# ------------------ –ö–í–ò–ó ------------------
current_quiz = {}  # {user_id: (eng, rus, reverse)}

async def send_quiz(message: Message, reverse=False):
    if len(words) < 2:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!")
        return

    eng = random.choice(list(words.keys()))
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    while len(options) < 4:
        w = random.choice(list(words.keys()))
        val = w if reverse else words[w]
        if val not in options:
            options.append(val)
    random.shuffle(options)

    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[])
    for opt in options:
        keyboard.add(InlineKeyboardButton(text=opt, callback_data=f"answer:{opt}"))

    question = eng if not reverse else rus
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {question}", reply_markup=keyboard)

    if not reverse:
        tts = gTTS(text=eng, lang='en')
        tts.save("word.mp3")
        await message.answer_voice(InputFile("word.mp3"))
        os.remove("word.mp3")

    current_quiz[message.from_user.id] = (eng, rus, reverse)

@dp.message(Command(commands=["quiz"]))
async def quiz(message: Message):
    await send_quiz(message, reverse=False)

@dp.message(Command(commands=["quiz_reverse"]))
async def quiz_reverse(message: Message):
    await send_quiz(message, reverse=True)

# ------------------ –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–û–í ------------------
@dp.callback_query(F.data.startswith("answer:"))
async def check_answer_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∫–≤–∏–∑ –∫–æ–º–∞–Ω–¥–æ–π /quiz –∏–ª–∏ /quiz_reverse")
        return

    eng, rus, reverse = current_quiz[user_id]
    user_answer = callback.data.split(":", 1)[1]

    correct = rus if not reverse else eng
    if user_answer == correct:
        await callback.message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'")
    else:
        await callback.message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'\n–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.")
        if not reverse and eng in words:
            del words[eng]
            save_words()

    del current_quiz[user_id]
    await callback.answer()

# ------------------ –°–¢–ê–†–¢ –ò –ú–ï–ù–Æ ------------------
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="cmd:add"),
         InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="cmd:delete")],
        [InlineKeyboardButton("üìù –ö–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)", callback_data="cmd:quiz"),
         InlineKeyboardButton("üîÑ –ö–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)", callback_data="cmd:quiz_reverse")],
        [InlineKeyboardButton("üìö –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="cmd:list")]
    ])
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö –°–¢–ê–†–¢–ê ------------------
@dp.callback_query(F.data.startswith("cmd:"))
async def handle_start_buttons(callback: CallbackQuery):
    cmd = callback.data.split(":", 1)[1]
    
    if cmd == "add":
        await add_word(callback.message)
    
    elif cmd == "delete":
        if not words:
            await callback.message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –£–¥–∞–ª—è—Ç—å –Ω–µ—á–µ–≥–æ.")
            await callback.answer()
            return
        keyboard = InlineKeyboardMarkup(row_width=1)
        for eng in words.keys():
            keyboard.add(InlineKeyboardButton(text=eng, callback_data=f"delete_word:{eng}"))
        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=keyboard)
    
    elif cmd == "quiz":
        await send_quiz(callback.message, reverse=False)
    
    elif cmd == "quiz_reverse":
        await send_quiz(callback.message, reverse=True)
    
    elif cmd == "list":
        await list_words(callback.message)
    
    await callback.answer()

# ------------------ –£–î–ê–õ–ï–ù–ò–ï –°–õ–û–í–ê ------------------
@dp.callback_query(F.data.startswith("delete_word:"))
async def delete_word_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        del words[eng]
        save_words()
        await callback.message.answer(f"‚ùå –°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.")
    else:
        await callback.message.answer(f"–°–ª–æ–≤–æ '{eng}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await callback.answer()

# ------------------ HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ------------------
async def handle(request):
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.getenv("PORT", 8080)))
    await site.start()

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    await start_web_server()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
