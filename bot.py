import logging
import os
import random
import json
import asyncio
from typing import Dict, Tuple

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
def load_words():
    global words
    try:
        if os.path.exists(WORDS_FILE):
            with open(WORDS_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
        else:
            words = {}
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        words = {}

def save_words():
    try:
        with open(WORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")

# ------------------ –°–¢–ê–¢–´ ------------------
adding_word_users = set()
current_quiz: Dict[int, Tuple[str, str, bool]] = {}

load_words()

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ ------------------
def main_menu_kb():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="cmd:add"),
            InlineKeyboardButton(text="üìù –°–ª–æ–≤–∞—Ä—å", callback_data="cmd:list")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)", callback_data="cmd:quiz"),
            InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)", callback_data="cmd:quiz_reverse")
        ]
    ])

def list_words_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for eng, rus in list(words.items())[:30]:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"{eng}", callback_data=f"show:{eng}"),
            InlineKeyboardButton(text="‚ùå", callback_data=f"del:{eng}")
        ])
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="cmd:menu")
    ])
    return kb

def quiz_options_kb(options):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for opt in options:
        safe_opt = opt.replace(':', '|')
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=opt, callback_data=f"answer:{safe_opt}")
        ])
    return kb

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command(commands=["add"]))
async def cmd_add(message: Message):
    adding_word_users.add(message.from_user.id)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")

@dp.message(Command(commands=["list"]))
async def cmd_list(message: Message):
    if not words:
        await message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!", reply_markup=main_menu_kb())
        return
    await message.answer(f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤):", reply_markup=list_words_kb())

# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ------------------
@dp.message(F.text)
async def text_router(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in adding_word_users:
        if "-" not in text:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        eng, rus = text.split("-", 1)
        eng, rus = eng.strip().lower(), rus.strip().lower()
        
        if eng and rus:
            words[eng] = rus
            save_words()
            adding_word_users.discard(user_id)
            await message.answer(f"‚úÖ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ! –í—Å–µ–≥–æ: {len(words)}", 
                               reply_markup=main_menu_kb())
        return

    if user_id in current_quiz:
        eng, rus, reverse = current_quiz[user_id]
        user_answer = text.strip().lower()
        correct = rus.lower() if not reverse else eng.lower()
        
        if user_answer == correct:
            response = f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'"
        else:
            response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '{correct}'"
            if not reverse and eng in words:
                del words[eng]
                save_words()
                response += f"\n–°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ."
        
        del current_quiz[user_id]
        await message.answer(response, reply_markup=main_menu_kb())
        return

    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())

# ------------------ –ö–í–ò–ó ------------------
async def send_quiz(message: Message, reverse: bool = False):
    if len(words) < 2:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞!", reply_markup=main_menu_kb())
        return

    word_keys = list(words.keys())
    eng = random.choice(word_keys)
    rus = words[eng]

    options = [rus if not reverse else eng]
    while len(options) < 4:
        w = random.choice(word_keys)
        val = words[w] if not reverse else w
        if val not in options and val != options[0]:
            options.append(val)
    
    random.shuffle(options)
    question = eng if not reverse else rus

    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥: <b>{question}</b>", reply_markup=quiz_options_kb(options))
    
    if not reverse:
        try:
            tts = gTTS(text=eng, lang='en')
            tts.save("word.mp3")
            await message.answer_voice(InputFile("word.mp3"))
            os.remove("word.mp3")
        except Exception as e:
            logger.error(f"TTS error: {e}")

    current_quiz[message.from_user.id] = (eng, rus, reverse)

# ------------------ CALLBACKS ------------------
@dp.callback_query(F.data.startswith("cmd:"))
async def cmd_handler(callback: CallbackQuery):
    cmd = callback.data.split(":", 1)[1]
    
    if cmd == "add":
        adding_word_users.add(callback.from_user.id)
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
    elif cmd == "list":
        if not words:
            await callback.message.edit_text("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!", reply_markup=main_menu_kb())
        else:
            await callback.message.edit_text(f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤):", reply_markup=list_words_kb())
    elif cmd == "quiz":
        await callback.message.delete()
        await send_quiz(callback.message, False)
    elif cmd == "quiz_reverse":
        await callback.message.delete()
        await send_quiz(callback.message, True)
    elif cmd == "menu":
        await callback.message.edit_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    
    await callback.answer()

@dp.callback_query(F.data.startswith("answer:"))
async def answer_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("–ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π –∫–≤–∏–∑!", show_alert=True)
        return

    eng, rus, reverse = current_quiz[user_id]
    user_answer = callback.data.split(":", 1)[1].replace('|', ':')
    correct = rus if not reverse else eng

    if user_answer == correct:
        response = f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω–æ: '{correct}'"
        if not reverse and eng in words:
            del words[eng]
            save_words()
            response += f"\n–°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ."

    await callback.message.edit_text(response, reply_markup=main_menu_kb())
    del current_quiz[user_id]
    await callback.answer()

@dp.callback_query(F.data.startswith("show:"))
async def show_handler(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        await callback.answer(f"{eng} ‚Üí {words[eng]}", show_alert=True)
    else:
        await callback.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

@dp.callback_query(F.data.startswith("del:"))
async def delete_handler(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        del words[eng]
        save_words()
        if words:
            await callback.message.edit_text(f"üóëÔ∏è '{eng}' —É–¥–∞–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å: {len(words)}", reply_markup=list_words_kb())
        else:
            await callback.message.edit_text("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!", reply_markup=main_menu_kb())
    await callback.answer()

# ------------------ WEB SERVER ------------------
async def handle(request):
    return web.Response(text="Bot is running!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    app.router.add_get("/health", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 10000))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"Web server on port {port}")

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def reset_bot():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Å–±—Ä–æ—Å –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º"""
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook reset successfully")
        await asyncio.sleep(2)
    except Exception as e:
        logger.error(f"Reset error: {e}")

async def main():
    # –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    await reset_bot()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    await start_web_server()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("Starting bot...")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"Polling failed: {e}")
        # –ü—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        await asyncio.sleep(10)
        await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
