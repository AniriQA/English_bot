import logging
import os
import random
import json
import asyncio
from typing import Dict, Tuple

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")  # —Ç–æ–∫–µ–Ω –∑–∞–¥–∞—ë—Ç—Å—è –≤ Render ‚Üí Environment
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
def load_words():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    global words
    try:
        if os.path.exists(WORDS_FILE):
            with open(WORDS_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(words)} —Å–ª–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è")
        else:
            words = {}
            logger.info("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ–≤–∞—Ä—è: {e}")
        words = {}

# ------------------ –°–û–•–†–ê–ù–ï–ù–ò–ï ------------------
def save_words():
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ª–æ–≤ –≤ —Ñ–∞–π–ª —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open(WORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=2)
        logger.info(f"–°–ª–æ–≤–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω ({len(words)} —Å–ª–æ–≤)")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ª–æ–≤–∞—Ä—è: {e}")

# ------------------ –°–¢–ê–¢–´/–°–õ–£–ñ–ï–ë–ù–´–ï –°–õ–û–í–ê–†–ò ------------------
adding_word_users = set()  # user_id –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ (–æ–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç "eng-rus")
current_quiz: Dict[int, Tuple[str, str, bool]] = {}  # {user_id: (eng, rus, reverse)}

# –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_words()

# ------------------ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –ö–õ–ê–í–ò–ê–¢–£–† ------------------
def main_menu_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="cmd:add"),
            InlineKeyboardButton(text="üìù –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å", callback_data="cmd:list")
        ],
        [
            InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)", callback_data="cmd:quiz"),
            InlineKeyboardButton(text="‚ùì –ö–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)", callback_data="cmd:quiz_reverse")
        ]
    ])
    return kb

def list_words_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    # –¥–æ–±–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Å–ª–æ–≤–æ (callback —É–¥–∞–ª–µ–Ω–∏–µ)
    for eng, rus in list(words.items())[:50]:  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ–∫–∞–∑ –¥–æ 50 —Å–ª–æ–≤
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"{eng} ‚Üí {rus}", callback_data=f"show:{eng}"),
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del:{eng}")
        ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd:menu")
    ])
    return kb

def quiz_options_kb(options):
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for opt in options:
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ callback_data
        safe_opt = opt.replace(':', '|').replace(';', '|')
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=opt, callback_data=f"answer:{safe_opt}")
        ])
    return kb

def back_to_menu_kb():
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="cmd:menu")]
    ])
    return kb

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command(commands=["start"]))
async def cmd_start(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –º–µ–Ω—é –∫–Ω–æ–ø–æ–∫ (inline)."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n–í—ã–±–∏—Ä–∞–π –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ:",
        reply_markup=main_menu_kb()
    )

@dp.message(Command(commands=["add"]))
async def cmd_add(message: Message):
    adding_word_users.add(message.from_user.id)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):",
        reply_markup=back_to_menu_kb()
    )

@dp.message(Command(commands=["list"]))
async def cmd_list(message: Message):
    if not words:
        await message.answer(
            "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=main_menu_kb()
        )
        return
    await message.answer(
        f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤):", 
        reply_markup=list_words_kb()
    )

@dp.message(Command(commands=["quiz"]))
async def cmd_quiz(message: Message):
    await send_quiz(message, reverse=False)

@dp.message(Command(commands=["quiz_reverse"]))
async def cmd_quiz_reverse(message: Message):
    await send_quiz(message, reverse=True)

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
@dp.message(F.text)
async def text_router(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    # 1) –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–µ–π—á–∞—Å –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–ª–æ–≤–æ
    if user_id in adding_word_users:
        if "-" not in text:
            await message.answer(
                "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_to_menu_kb()
            )
            return
        
        eng, rus = text.split("-", 1)
        eng = eng.strip().lower()
        rus = rus.strip().lower()
        
        if not eng or not rus:
            await message.answer(
                "–ü—É—Å—Ç–∞—è —á–∞—Å—Ç—å —Å–ª–æ–≤–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                reply_markup=back_to_menu_kb()
            )
            return
        
        words[eng] = rus
        save_words()
        adding_word_users.discard(user_id)  # –∏—Å–ø–æ–ª—å–∑—É–µ–º discard –≤–º–µ—Å—Ç–æ remove –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        await message.answer(
            f"‚úÖ –°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!\n–í—Å–µ–≥–æ —Å–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(words)}", 
            reply_markup=main_menu_kb()
        )
        return

    # 2) –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç –∫–≤–∏–∑ –∏ –æ–Ω –≤–≤—ë–ª —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ –∫–Ω–æ–ø–∫–∏
    if user_id in current_quiz:
        eng, rus, reverse = current_quiz[user_id]
        user_answer = text.strip().lower()
        correct = rus.lower() if not reverse else eng.lower()
        
        if user_answer == correct:
            response = f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'"
        else:
            response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'"
            # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
            if not reverse and eng in words:
                del words[eng]
                save_words()
                response += f"\n–°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."
        
        del current_quiz[user_id]
        await message.answer(response, reply_markup=main_menu_kb())
        return

    # 3) –Ω–∏–∫–∞–∫–æ–π —Ä–µ–∂–∏–º ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
    await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:", reply_markup=main_menu_kb())

# ------------------ –ö–í–ò–ó ------------------
async def send_quiz(message: Message, reverse: bool = False):
    if len(words) < 2:
        await message.answer(
            "–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!", 
            reply_markup=main_menu_kb()
        )
        return

    # –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–ª—é—á–µ–π –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
    word_keys = list(words.keys())
    eng = random.choice(word_keys)
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    
    # —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã (—Å—Ç—Ä–æ–∫–∏)
    while len(options) < 4:
        w = random.choice(word_keys)
        val = words[w] if not reverse else w
        if val not in options and val != correct:
            options.append(val)
    
    random.shuffle(options)

    question = eng if not reverse else rus
    question_type = "–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" if reverse else "—Ä—É—Å—Å–∫–æ–≥–æ"

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
    await message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ {question_type} —Å–ª–æ–≤–∞: <b>{question}</b>", 
        reply_markup=quiz_options_kb(options)
    )
    
    # –æ–∑–≤—É—á–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ (–µ—Å–ª–∏ –ø—Ä—è–º–æ–π –∫–≤–∏–∑)
    if not reverse:
        try:
            tts = gTTS(text=eng, lang='en')
            tts.save("word.mp3")
            await message.answer_voice(InputFile("word.mp3"))
            os.remove("word.mp3")
        except Exception as e:
            logger.error(f"TTS failed: {e}")
            # –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –µ—Å–ª–∏ TTS –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç

    current_quiz[message.from_user.id] = (eng, rus, reverse)

# ------------------ CALLBACKS (–∫–Ω–æ–ø–∫–∏) ------------------
@dp.callback_query(F.data.startswith("cmd:"))
async def cmd_buttons_handler(callback: CallbackQuery):
    cmd = callback.data.split(":", 1)[1]
    user_msg = callback.message
    
    if cmd == "add":
        adding_word_users.add(callback.from_user.id)
        await user_msg.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):",
            reply_markup=back_to_menu_kb()
        )
    elif cmd == "list":
        if not words:
            await user_msg.edit_text(
                "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç! –î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
                reply_markup=main_menu_kb()
            )
        else:
            await user_msg.edit_text(
                f"–í–∞—à —Å–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤):", 
                reply_markup=list_words_kb()
            )
    elif cmd == "quiz":
        await user_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_quiz(user_msg, reverse=False)
    elif cmd == "quiz_reverse":
        await user_msg.delete()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await send_quiz(user_msg, reverse=True)
    elif cmd == "menu":
        await user_msg.edit_text(
            "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
            reply_markup=main_menu_kb()
        )
    
    await callback.answer()

@dp.callback_query(F.data.startswith("answer:"))
async def answer_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("–ö–≤–∏–∑ —É—Å—Ç–∞—Ä–µ–ª. –ù–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—ã–π!", show_alert=True)
        return

    eng, rus, reverse = current_quiz[user_id]
    user_answer = callback.data.split(":", 1)[1].replace('|', ':')
    correct = rus if not reverse else eng

    if user_answer == correct:
        response = f"‚úÖ –í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'"
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        if not reverse and eng in words:
            del words[eng]
            save_words()
            response += f"\n–°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è."

    await callback.message.edit_text(response, reply_markup=main_menu_kb())
    del current_quiz[user_id]
    await callback.answer()

@dp.callback_query(F.data.startswith("show:"))
async def show_word_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        await callback.answer(f"{eng} ‚Üí {words[eng]}", show_alert=True)
    else:
        await callback.answer("–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", show_alert=True)

@dp.callback_query(F.data.startswith("del:"))
async def delete_word_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        del words[eng]
        save_words()
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–ª–æ–≤
        if words:
            await callback.message.edit_text(
                f"üóëÔ∏è –°–ª–æ–≤–æ '{eng}' —É–¥–∞–ª–µ–Ω–æ. –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: {len(words)}", 
                reply_markup=list_words_kb()
            )
        else:
            await callback.message.edit_text(
                "–°–ª–æ–≤–∞—Ä—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç!",
                reply_markup=main_menu_kb()
            )
    else:
        await callback.answer("–°–ª–æ–≤–æ —É–∂–µ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.", show_alert=True)

# ------------------ HTTP-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è Render ------------------
async def handle(request):
    return web.Response(text="Bot is alive!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", handle)
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    logger.info(f"Web server started on port {port}")

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–ª–æ–≤–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
    load_words()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-–∑–∞–≥–ª—É—à–∫—É –∏ polling
    await start_web_server()
    logger.info("Starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
