import logging
import os
import random
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile
from gtts import gTTS

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
if os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "r", encoding="utf-8") as f:
        words = json.load(f)
else:
    words = {}  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "english": "—Ä—É—Å—Å–∫–∏–π" }

# ------------------ –°–û–•–†–ê–ù–ï–ù–ò–ï ------------------
def save_words():
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
adding_word_users = set()  # –∫—Ç–æ –≤–≤–æ–¥–∏—Ç —Å–ª–æ–≤–æ

@dp.message(Command(commands=["add"]))
async def add(message: Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")
    adding_word_users.add(message.from_user.id)

@dp.message()
async def receive_word(message: Message):
    if message.from_user.id not in adding_word_users:
        return
    text = message.text.strip()
    if "-" not in text:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π")
        return
    eng, rus = text.split("-", 1)
    eng = eng.strip()
    rus = rus.strip()
    words[eng] = rus
    save_words()
    await message.answer(f"–°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
    adding_word_users.remove(message.from_user.id)

# ------------------ –ü–†–û–°–ú–û–¢–† –°–õ–û–í–ê–†–Ø ------------------
@dp.message(Command(commands=["list"]))
async def list_words(message: Message):
    if not words:
        await message.answer("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        return
    reply = "\n".join([f"{eng} ‚Üí {rus}" for eng, rus in words.items()])
    await message.answer(reply)

# ------------------ –ö–í–ò–ó ------------------
current_quiz = {}  # {user_id: (eng, rus, reverse)}

async def send_quiz(message: Message, reverse=False):
    if len(words) < 2:
        await message.answer("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!")
        return

    eng = random.choice(list(words.keys()))
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    while len(options) < 4:
        w = random.choice(list(words.keys()))
        val = w if reverse else words[w]
        if val not in options:
            options.append(val)
    random.shuffle(options)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        keyboard.add(opt)

    question = eng if not reverse else rus
    await message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {question}", reply_markup=keyboard)

    # –æ–∑–≤—É—á–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –∫–≤–∏–∑)
    if not reverse:
        tts = gTTS(text=eng, lang='en')
        tts.save("word.mp3")
        await message.answer_voice(InputFile("word.mp3"))
        os.remove("word.mp3")

    current_quiz[message.from_user.id] = (eng, rus, reverse)

@dp.message(Command(commands=["quiz"]))
async def quiz(message: Message):
    await send_quiz(message, reverse=False)

@dp.message(Command(commands=["quiz_reverse"]))
async def quiz_reverse(message: Message):
    await send_quiz(message, reverse=True)

# ------------------ –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–û–í ------------------
@dp.message()
async def check_answer(message: Message):
    user_id = message.from_user.id
    if user_id not in current_quiz:
        return  # –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–≤–∏–∑–∞

    eng, rus, reverse = current_quiz[user_id]
    user_answer = message.text.strip()

    correct = rus if not reverse else eng
    if user_answer == correct:
        await message.answer(f"–í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'")
    else:
        await message.answer(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòï. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: '{correct}'\n–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è.")
        # —É–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è, –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π
        if not reverse and eng in words:
            del words[eng]
            save_words()

    # —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–≤–∏–∑
    del current_quiz[user_id]

# ------------------ –°–¢–ê–†–¢ ------------------
@dp.message(Command(commands=["start"]))
async def start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "/quiz - –∫–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)\n"
        "/quiz_reverse - –∫–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)\n"
        "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"
    )

# ------------------ –ó–ê–ü–£–°–ö ------------------
if __name__ == "__main__":
    import asyncio
    async def main():
        await dp.start_polling(bot)

    asyncio.run(main())
