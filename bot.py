#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤
"""

import logging
import os
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
from bs4 import BeautifulSoup

from database import VocabularyDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = VocabularyDatabase()

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞!

üìù **–ö–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞:**
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:
–ü—Ä–∏–º–µ—Ä: hello-–ø—Ä–∏–≤–µ—Ç
–ü—Ä–∏–º–µ—Ä: to learn-—É—á–∏—Ç—å

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/words - –º–æ–π —Å–ª–æ–≤–∞—Ä—å  
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é!
    """
    await update.message.reply_text(welcome_text)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/words - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù **–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:**
‚Ä¢ –ß–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
‚Ä¢ –ü—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ
‚Ä¢ –ü—Ä–∏–º–µ—Ä: to run-–±–µ–≥–∞—Ç—å

üí° **–°–æ–≤–µ—Ç:** –ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"!
    """
    await update.message.reply_text(help_text)

async def words_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /words - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å"""
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_text("üìù **–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç**\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞!")
        return
    
    word_list = "\n".join([f"‚Ä¢ {word} - {trans}" for word, trans in words[:20]])
    stats = db.get_user_stats(user_id)
    
    response = f"üìö **–í–∞—à —Å–ª–æ–≤–∞—Ä—å** ({stats['total_words']} —Å–ª–æ–≤)\n\n{word_list}"
    
    if len(words) > 20:
        response += f"\n\n... –∏ –µ—â—ë {len(words) - 20} —Å–ª–æ–≤"
    
    await update.message.reply_text(response)

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
    user_id = update.effective_user.id
    stats = db.get_user_stats(user_id)
    
    stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: **{stats['total_words']}**
üî§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: **{stats['unique_words']}**

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
    """
    await update.message.reply_text(stats_text)

def clean_html(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤"""
    soup = BeautifulSoup(text, 'html.parser')
    return soup.get_text().strip()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = update.effective_user.id
    text = update.message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"
    if '-' in text:
        try:
            clean_text = clean_html(text)
            word, translation = clean_text.split('-', 1)
            word = word.strip()
            translation = translation.strip()
            
            if word and translation:
                success = db.add_word(user_id, word, translation)
                if success:
                    await update.message.reply_text(f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n{word} - {translation}")
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ª–æ–≤–∞")
            else:
                await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    
    if not BOT_TOKEN:
        logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("words", words_command))
        application.add_handler(CommandHandler("stats", stats_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
