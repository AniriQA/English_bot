#!/usr/bin/env python3
"""
Telegram Bot –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤
–•—Ä–∞–Ω–∏—Ç —Å–ª–æ–≤–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
"""

import logging
import re
from html import escape
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    filters, 
    ContextTypes, 
    ConversationHandler
)
from bs4 import BeautifulSoup

from database import VocabularyDatabase

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ADDING_WORD = 1

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = VocabularyDatabase()

class VocabularyBot:
    def __init__(self, token: str):
        self.application = Application.builder().token(token).build()
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
        start_handler = CommandHandler('start', self.start_command)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /words - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
        words_handler = CommandHandler('words', self.words_command)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats_handler = CommandHandler('stats', self.stats_command)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ (—Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
        add_handler = CommandHandler('add', self.add_command)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
        help_handler = CommandHandler('help', self.help_command)
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel - –æ—Ç–º–µ–Ω–∞
        cancel_handler = CommandHandler('cancel', self.cancel_command)
        
        # ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤
        add_conversation = ConversationHandler(
            entry_points=[CommandHandler('addword', self.addword_command)],
            states={
                ADDING_WORD: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, self.addword_handler)
                ],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_command)],
        )
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥)
        message_handler = MessageHandler(
            filters.TEXT & ~filters.COMMAND, 
            self.message_handler
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        handlers = [
            start_handler, words_handler, stats_handler, 
            add_handler, help_handler, cancel_handler,
            add_conversation, message_handler
        ]
        
        for handler in handlers:
            self.application.add_handler(handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
–ü—Ä–∏–≤–µ—Ç, {user.first_name}! üëã

–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –∏–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞!

üìù **–ö–∞–∫ –¥–æ–±–∞–≤–ª—è—Ç—å —Å–ª–æ–≤–∞:**
‚Ä¢ –ù–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `hello-–ø—Ä–∏–≤–µ—Ç`
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `to learn-—É—á–∏—Ç—å`

üéØ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/addword - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ
/words - –º–æ–π —Å–ª–æ–≤–∞—Ä—å
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
/help - –ø–æ–º–æ—â—å

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥, –∏ —è –µ–≥–æ –∑–∞–ø–æ–º–Ω—é!
        """
        await update.message.reply_text(welcome_text)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üÜò **–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/addword - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ (–ø–æ—à–∞–≥–æ–≤–æ)
/words - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ —Å–ª–æ–≤–∞ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µ
/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üìù **–§–æ—Ä–º–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤:**
‚Ä¢ –ß–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å: `word-–ø–µ—Ä–µ–≤–æ–¥`
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `apple-—è–±–ª–æ–∫–æ`
‚Ä¢ –ü—Ä–∏–º–µ—Ä: `to run-–±–µ–≥–∞—Ç—å`

üí° **–°–æ–≤–µ—Ç:** –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å—Ç–æ –ø–∏—Å–∞—Ç—å —Å–ª–æ–≤–∞ –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥", –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Ö –¥–æ–±–∞–≤–∏—Ç!
        """
        await update.message.reply_text(help_text)
    
    async def addword_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:\n"
            "–ü—Ä–∏–º–µ—Ä: computer-–∫–æ–º–ø—å—é—Ç–µ—Ä\n\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã"
        )
        return ADDING_WORD
    
    async def addword_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Ä–µ–∂–∏–º–µ Conversation"""
        user_id = update.effective_user.id
        text = update.message.text
        
        success, message = await self.process_word_addition(user_id, text)
        await update.message.reply_text(message)
        
        return ConversationHandler.END
    
    async def message_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤)"""
        user_id = update.effective_user.id
        text = update.message.text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"
        if '-' in text and len(text.split('-')) == 2:
            success, message = await self.process_word_addition(user_id, text)
            await update.message.reply_text(message)
    
    async def process_word_addition(self, user_id: int, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞"""
        try:
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç HTML —Ç–µ–≥–æ–≤
            clean_text = self.clean_html(text)
            
            if '-' not in clean_text:
                return False, "‚ùå **–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!**\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥\n–ü—Ä–∏–º–µ—Ä: hello-–ø—Ä–∏–≤–µ—Ç"
            
            word, translation = clean_text.split('-', 1)
            word = word.strip()
            translation = translation.strip()
            
            if not word or not translation:
                return False, "‚ùå **–ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥!**\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–±–∞ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            success = db.add_word(user_id, word, translation)
            
            if success:
                return True, f"‚úÖ **–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!**\n{word} - {translation}"
            else:
                return False, "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                
        except Exception as e:
            logger.error(f"Error processing word addition: {e}")
            return False, "‚ùå **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!**\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç."
    
    async def words_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /words - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å"""
        user_id = update.effective_user.id
        
        words = db.get_user_words(user_id)
        
        if not words:
            await update.message.reply_text("üìù **–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç**\n–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞!")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤ (–º–∞–∫—Å–∏–º—É–º 50 –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è)
        word_list = "\n".join([f"‚Ä¢ **{word}** - {trans}" for word, trans in words[:50]])
        
        stats = db.get_user_stats(user_id)
        
        response = f"""
üìö **–í–∞—à —Å–ª–æ–≤–∞—Ä—å** ({stats['total_words']} —Å–ª–æ–≤)

{word_list}
        """
        
        if len(words) > 50:
            response += f"\n\n... –∏ –µ—â–µ {len(words) - 50} —Å–ª–æ–≤"
        
        await update.message.reply_text(response)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
        user_id = update.effective_user.id
        
        stats = db.get_user_stats(user_id)
        
        stats_text = f"""
üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**

üìù –í—Å–µ–≥–æ —Å–ª–æ–≤: **{stats['total_words']}**
üî§ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤: **{stats['unique_words']}**

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üí™
        """
        
        await update.message.reply_text(stats_text)
    
    async def add_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add (—É—Å—Ç–∞—Ä–µ–≤—à–∞—è)"""
        await update.message.reply_text(
            "–ö–æ–º–∞–Ω–¥–∞ /add —É—Å—Ç–∞—Ä–µ–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addword –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è "
            "–∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥' –≤ —á–∞—Ç!"
        )
    
    async def cancel_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel"""
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
        return ConversationHandler.END
    
    def clean_html(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç HTML —Ç–µ–≥–æ–≤"""
        soup = BeautifulSoup(text, 'html.parser')
        return soup.get_text().strip()
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
    BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"  # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –í–ê–® –¢–û–ö–ï–ù!
    
    if BOT_TOKEN == "YOUR_BOT_TOKEN_HERE":
        print("‚ùå –û–®–ò–ë–ö–ê: –ó–∞–º–µ–Ω–∏—Ç–µ BOT_TOKEN –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("1. –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –≤ Telegram")
        print("2. –û—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–π–ª bot.py")
        print("3. –ó–∞–º–µ–Ω–∏—Ç–µ 'YOUR_BOT_TOKEN_HERE' –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω")
        return
    
    try:
        bot = VocabularyBot(BOT_TOKEN)
        bot.run()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    main()
