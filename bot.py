#!/usr/bin/env python3
import logging
import os
import random
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

from database import VocabularyDatabase

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

db = VocabularyDatabase()

# –°–æ—Å—Ç–æ—è–Ω–∏—è
ADDING_WORD, DELETING_WORD, QUIZ_EN_RU, QUIZ_RU_EN = range(4)
user_quiz = {}

# –ö—Ä–∞—Å–∏–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ"), KeyboardButton("üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å")],
        [KeyboardButton("‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª ‚Üí —Ä—É—Å"), KeyboardButton("‚è∞ –ö–≤–∏–∑ —Ä—É—Å ‚Üí –∞–Ω–≥–ª")],
        [KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")],
        [KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")]
    ], resize_keyboard=True)

def back_to_menu_keyboard():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
    ], resize_keyboard=True)

def quiz_keyboard(options):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∫–≤–∏–∑–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    keyboard = []
    for option in options:
        keyboard.append([KeyboardButton(option)])
    keyboard.append([KeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")])
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    welcome_text = f"""
üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤! 

‚ú® <b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å —Ç–≤–æ–∏ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å
‚Ä¢ –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∑–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –∫–≤–∏–∑—ã
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
‚Ä¢ –†–∞–±–æ—Ç–∞—Ç—å —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏

üéØ <b>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!</b>
    """
    await update.message.reply_html(welcome_text, reply_markup=main_menu_keyboard())

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>

<b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ</b> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"
<b>üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å</b> - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –≤–∞—à–∏ —Å–ª–æ–≤–∞
<b>‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª ‚Üí —Ä—É—Å</b> - —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
<b>‚è∞ –ö–≤–∏–∑ —Ä—É—Å ‚Üí –∞–Ω–≥–ª</b> - —Ç–µ—Å—Ç –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
<b>üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ</b> - —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
<b>üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b> - –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üí° <b>–°–æ–≤–µ—Ç:</b> –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥"!
    """
    await update.message.reply_html(help_text, reply_markup=main_menu_keyboard())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
async def add_word_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:\n\n"
        "üìå <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>hello-–ø—Ä–∏–≤–µ—Ç</code>\n"
        "<code>to learn-—É—á–∏—Ç—å</code>\n"
        "<code>computer-–∫–æ–º–ø—å—é—Ç–µ—Ä</code>",
        reply_markup=back_to_menu_keyboard()
    )
    return ADDING_WORD

async def add_word_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    if '-' in text:
        try:
            word, trans = text.split('-', 1)
            word = word.strip()
            trans = trans.strip()
            
            if word and trans:
                user_id = update.effective_user.id
                if db.add_word(user_id, word, trans):
                    await update.message.reply_html(
                        f"‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                        f"<b>üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π:</b> {word}\n"
                        f"<b>üá∑üá∫ –†—É—Å—Å–∫–∏–π:</b> {trans}",
                        reply_markup=main_menu_keyboard()
                    )
                else:
                    await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏", reply_markup=main_menu_keyboard())
            else:
                await update.message.reply_text("‚ùå –ü—É—Å—Ç–æ–µ —Å–ª–æ–≤–æ –∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥", reply_markup=main_menu_keyboard())
        except Exception as e:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç", reply_markup=main_menu_keyboard())
    else:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥", reply_markup=main_menu_keyboard())
    
    return ConversationHandler.END

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å
async def show_words(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_html(
            "üìù <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ</b> –∏–ª–∏ "
            "–Ω–∞–ø–∏—Å–∞–≤ –≤ —á–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥</code>",
            reply_markup=main_menu_keyboard()
        )
        return
    
    word_list = "\n".join([f"‚Ä¢ <b>{word}</b> - {trans}" for word, trans in words])
    count = len(words)
    
    await update.message.reply_html(
        f"üìö <b>–í–∞—à —Å–ª–æ–≤–∞—Ä—å</b> ({count} —Å–ª–æ–≤)\n\n{word_list}",
        reply_markup=main_menu_keyboard()
    )

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤
async def delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    words = db.get_user_words(user_id)
    
    if not words:
        await update.message.reply_html(
            "üìù <b>–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç</b>\n\n–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å!",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    word_list = "\n".join([f"‚Ä¢ {word}" for word, trans in words[:15]])
    await update.message.reply_html(
        f"üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:\n\n{word_list}\n\n"
        f"<i>–ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:</i>",
        reply_markup=back_to_menu_keyboard()
    )
    return DELETING_WORD

async def delete_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    user_id = update.effective_user.id
    if db.delete_word(user_id, text.strip()):
        await update.message.reply_html(
            f"‚úÖ <b>–°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!</b>\n\n<b>{text}</b>",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_html(
            f"‚ùå <b>–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!</b>\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è —Å–ª–æ–≤–∞ <b>{text}</b>",
            reply_markup=main_menu_keyboard()
        )
    
    return ConversationHandler.END

# –ö–≤–∏–∑—ã
async def quiz_en_ru_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if db.get_word_count(user_id) < 4:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞!</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º <b>4 —Å–ª–æ–≤–∞</b> –≤ —Å–ª–æ–≤–∞—Ä—å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    await send_quiz_question(update, user_id, "en_ru")
    return QUIZ_EN_RU

async def quiz_ru_en_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if db.get_word_count(user_id) < 4:
        await update.message.reply_html(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞!</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –∫–∞–∫ –º–∏–Ω–∏–º—É–º <b>4 —Å–ª–æ–≤–∞</b> –≤ —Å–ª–æ–≤–∞—Ä—å —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∫–≤–∏–∑.",
            reply_markup=main_menu_keyboard()
        )
        return ConversationHandler.END
    
    await send_quiz_question(update, user_id, "ru_en")
    return QUIZ_RU_EN

async def send_quiz_question(update: Update, user_id: int, quiz_type: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –∫–≤–∏–∑–∞ —Å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    words = db.get_random_words(user_id, 4)
    
    if len(words) < 4:
        await update.message.reply_text("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤", reply_markup=main_menu_keyboard())
        return
    
    correct_word, correct_translation = random.choice(words)
    
    if quiz_type == "en_ru":
        question = f"üá¨üáß <b>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:</b>\n\n<code>{correct_word}</code>"
        options = [trans for _, trans in words]
        correct_answer = correct_translation
    else:  # ru_en
        question = f"üá∑üá∫ <b>–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ:</b>\n\n<code>{correct_translation}</code>"
        options = [word for word, _ in words]
        correct_answer = correct_word
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    random.shuffle(options)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    user_quiz[user_id] = {
        'correct_answer': correct_answer,
        'quiz_type': quiz_type
    }
    
    await update.message.reply_html(question, reply_markup=quiz_keyboard(options))

async def quiz_en_ru_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ –∞–Ω–≥–ª-—Ä—É—Å"""
    return await handle_quiz_answer(update, context, QUIZ_EN_RU)

async def quiz_ru_en_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–≤–∏–∑–∞ —Ä—É—Å-–∞–Ω–≥–ª"""
    return await handle_quiz_answer(update, context, QUIZ_RU_EN)

async def handle_quiz_answer(update: Update, context: ContextTypes.DEFAULT_TYPE, quiz_state: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤ –∫–≤–∏–∑–µ"""
    user_id = update.effective_user.id
    user_answer = update.message.text
    
    if user_answer == "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        user_quiz.pop(user_id, None)
        await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    if user_id not in user_quiz:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –∫–≤–∏–∑–∞", reply_markup=main_menu_keyboard())
        return ConversationHandler.END
    
    correct_answer = user_quiz[user_id]['correct_answer']
    quiz_type = user_quiz[user_id]['quiz_type']
    
    if user_answer == correct_answer:
        response = "‚úÖ <b>–í–µ—Ä–Ω–æ!</b> üéâ\n\n"
    else:
        if quiz_type == "en_ru":
            response = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
        else:
            response = f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–æ!</b>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{correct_answer}</b>\n\n"
    
    await update.message.reply_html(response)
    
    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    await send_quiz_question(update, user_id, quiz_type)
    return quiz_state

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    count = db.get_word_count(user_id)
    
    if count == 0:
        await update.message.reply_html(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            "üìù <b>–°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ:</b> 0\n\n"
            "üí° <b>–°–æ–≤–µ—Ç:</b> –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–µ —Å–ª–æ–≤–∞ —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ!",
            reply_markup=main_menu_keyboard()
        )
    else:
        await update.message.reply_html(
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
            f"üìù <b>–°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ:</b> {count}\n\n"
            f"üéØ <b>–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!</b> üí™",
            reply_markup=main_menu_keyboard()
        )

# –ü—Ä—è–º–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø)
async def direct_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä—è–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥)"""
    text = update.message.text
    user_id = update.effective_user.id
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏ –≤ –∫–≤–∏–∑–µ
    if user_id in user_quiz:
        return
    
    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    menu_buttons = [
        "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å", "‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª ‚Üí —Ä—É—Å",
        "‚è∞ –ö–≤–∏–∑ —Ä—É—Å ‚Üí –∞–Ω–≥–ª", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ",
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    ]
    if text in menu_buttons:
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥
    if '-' in text and len(text.split('-')) == 2:
        word, trans = text.split('-', 1)
        word = word.strip()
        trans = trans.strip()
        
        if word and trans:
            if db.add_word(user_id, word, trans):
                await update.message.reply_html(
                    f"‚úÖ <b>–°–ª–æ–≤–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"<b>üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π:</b> {word}\n"
                    f"<b>üá∑üá∫ –†—É—Å—Å–∫–∏–π:</b> {trans}",
                    reply_markup=main_menu_keyboard()
                )

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=main_menu_keyboard())

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_quiz.pop(user_id, None)
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=main_menu_keyboard())
    return ConversationHandler.END

def main():
    BOT_TOKEN = os.getenv('BOT_TOKEN')
    if not BOT_TOKEN:
        logger.error("‚ùå –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!")
        return
    
    app = Application.builder().token(BOT_TOKEN).build()
    
    # Conversation handlers
    add_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ$"), add_word_start)],
        states={ADDING_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_word_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    del_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ$"), delete_start)],
        states={DELETING_WORD: [MessageHandler(filters.TEXT & ~filters.COMMAND, delete_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    quiz_en_ru_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è∞ –ö–≤–∏–∑ –∞–Ω–≥–ª ‚Üí —Ä—É—Å$"), quiz_en_ru_start)],
        states={QUIZ_EN_RU: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_en_ru_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    quiz_ru_en_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex("^‚è∞ –ö–≤–∏–∑ —Ä—É—Å ‚Üí –∞–Ω–≥–ª$"), quiz_ru_en_start)],
        states={QUIZ_RU_EN: [MessageHandler(filters.TEXT & ~filters.COMMAND, quiz_ru_en_handler)]},
        fallbacks=[CommandHandler("cancel", cancel)]
    )
    
    # –û–±—ã—á–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(MessageHandler(filters.Regex("^üìö –ú–æ–π —Å–ª–æ–≤–∞—Ä—å$"), show_words))
    app.add_handler(MessageHandler(filters.Regex("^üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞$"), stats))
    app.add_handler(MessageHandler(filters.Regex("^‚ÑπÔ∏è –ü–æ–º–æ—â—å$"), help_command))
    app.add_handler(MessageHandler(filters.Regex("^üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é$"), main_menu))
    
    # Conversation handlers
    app.add_handler(add_conv)
    app.add_handler(del_conv)
    app.add_handler(quiz_en_ru_conv)
    app.add_handler(quiz_ru_en_conv)
    
    # –ü—Ä—è–º—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, direct_message))
    
    logger.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    app.run_polling()

if __name__ == "__main__":
    main()
