import logging
import os
import random
import json
import asyncio
from typing import Dict, Tuple

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import Message, InputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from gtts import gTTS
from aiohttp import web

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("BOT_TOKEN")
WORDS_FILE = "words.json"

if not TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ------------------ –°–õ–û–í–ê–†–¨ ------------------
def load_words():
    global words
    try:
        if os.path.exists(WORDS_FILE):
            with open(WORDS_FILE, "r", encoding="utf-8") as f:
                words = json.load(f)
            logger.info(f"üìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(words)}")
        else:
            words = {
                "hello": "–ø—Ä–∏–≤–µ—Ç",
                "task": "–∑–∞–¥–∞—á–∞",
                "project": "–ø—Ä–æ–µ–∫—Ç", 
                "team": "–∫–æ–º–∞–Ω–¥–∞",
                "deadline": "–∫—Ä–∞–π–Ω–∏–π —Å—Ä–æ–∫",
                "report": "–æ—Ç—á–µ—Ç",
                "solution": "—Ä–µ—à–µ–Ω–∏–µ",
                "meeting": "—Å–æ–≤–µ—â–∞–Ω–∏–µ",
                "request": "–∑–∞–ø—Ä–æ—Å",
                "access": "–¥–æ—Å—Ç—É–ø",
                "apple": "—è–±–ª–æ–∫–æ",
                "book": "–∫–Ω–∏–≥–∞"
            }
            with open(WORDS_FILE, "w", encoding="utf-8") as f:
                json.dump(words, f, ensure_ascii=False, indent=2)
            logger.info("üìö –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        words = {}

def save_words():
    try:
        with open(WORDS_FILE, "w", encoding="utf-8") as f:
            json.dump(words, f, ensure_ascii=False, indent=2)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")

# ------------------ –°–û–°–¢–û–Ø–ù–ò–Ø ------------------
adding_word_users = set()
current_quiz: Dict[int, Tuple[str, str, bool]] = {}

load_words()

# ------------------ –ö–õ–ê–í–ò–ê–¢–£–†–´ ------------------
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="add"),
            InlineKeyboardButton(text="üìö –°–ª–æ–≤–∞—Ä—å", callback_data="list")
        ],
        [
            InlineKeyboardButton(text="üéØ –ö–≤–∏–∑ –∞–Ω–≥–ª‚Üí—Ä—É—Å", callback_data="quiz"),
            InlineKeyboardButton(text="üéØ –ö–≤–∏–∑ —Ä—É—Å‚Üí–∞–Ω–≥–ª", callback_data="quiz_reverse")
        ]
    ])

def back_to_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message(Command("start"))
async def start_cmd(message: Message):
    await message.answer(
        "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –±–æ—Ç\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )

@dp.message(Command("status"))  
async def status_cmd(message: Message):
    await message.answer(f"‚úÖ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\nüìö –°–ª–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä–µ: {len(words)}")

@dp.message(Command("words"))
async def words_cmd(message: Message):
    if not words:
        await message.answer("üìö –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        return
    
    text = "üìö –í–∞—à —Å–ª–æ–≤–∞—Ä—å:\n\n"
    for eng, rus in words.items():
        text += f"‚Ä¢ {eng} ‚Üí {rus}\n"
    
    text += f"\n–í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}"
    await message.answer(text)

# ------------------ –û–ë–†–ê–ë–û–¢–ö–ê –¢–ï–ö–°–¢–ê ------------------
@dp.message(F.text)
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text.strip()

    if user_id in adding_word_users:
        if "-" in text:
            eng, rus = text.split("-", 1)
            eng, rus = eng.strip().lower(), rus.strip().lower()
            if eng and rus:
                words[eng] = rus
                save_words()
                adding_word_users.discard(user_id)
                await message.answer(
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ!\n<code>{eng}</code> ‚Üí <code>{rus}</code>\n\n"
                    f"üìö –í—Å–µ–≥–æ —Å–ª–æ–≤: {len(words)}",
                    reply_markup=main_menu()
                )
                return
        
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç\n\n"
            "–ü—Ä–∞–≤–∏–ª—å–Ω–æ: <code>—Å–ª–æ–≤–æ-–ø–µ—Ä–µ–≤–æ–¥</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>computer-–∫–æ–º–ø—å—é—Ç–µ—Ä</code>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=back_to_menu()
        )
        return

    await message.answer("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é:", reply_markup=main_menu())

# ------------------ CALLBACKS ------------------
@dp.callback_query(F.data == "main_menu")
async def main_menu_callback(callback: CallbackQuery):
    await callback.message.edit_text(
        "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –±–æ—Ç\n\n–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "add")
async def add_callback(callback: CallbackQuery):
    adding_word_users.add(callback.from_user.id)
    await callback.message.edit_text(
        "üìù –í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å:\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>database-–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>to learn-—É—á–∏—Ç—å</code>",
        reply_markup=back_to_menu()
    )
    await callback.answer()

@dp.callback_query(F.data == "list")
async def list_callback(callback: CallbackQuery):
    if not words:
        await callback.message.edit_text(
            "üìö –°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ:",
            reply_markup=main_menu()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ª–æ–≤–∞–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–≤–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ —É–¥–∞–ª–µ–Ω–∏—è
    for eng, rus in list(words.items())[:20]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 20 —Å–ª–æ–≤
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=f"üóëÔ∏è {eng}", callback_data=f"delete:{eng}"),
            InlineKeyboardButton(text=rus, callback_data=f"show:{eng}")
        ])
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    await callback.message.edit_text(
        f"üìö –°–ª–æ–≤–∞—Ä—å ({len(words)} —Å–ª–æ–≤)\n\n"
        "–ù–∞–∂–º–∏—Ç–µ üóëÔ∏è —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ:",
        reply_markup=kb
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("delete:"))
async def delete_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    
    if eng in words:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        rus_translation = words[eng]
        
        # –£–¥–∞–ª—è–µ–º —Å–ª–æ–≤–æ
        del words[eng]
        save_words()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞—Ä–µ–º
        if words:
            # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            kb = InlineKeyboardMarkup(inline_keyboard=[])
            
            for eng_word, rus_word in list(words.items())[:20]:
                kb.inline_keyboard.append([
                    InlineKeyboardButton(text=f"üóëÔ∏è {eng_word}", callback_data=f"delete:{eng_word}"),
                    InlineKeyboardButton(text=rus_word, callback_data=f"show:{eng_word}")
                ])
            
            kb.inline_keyboard.append([
                InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ])
            
            await callback.message.edit_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: <code>{eng}</code> ‚Üí <code>{rus_translation}</code>\n\n"
                f"üìö –û—Å—Ç–∞–ª–æ—Å—å —Å–ª–æ–≤: {len(words)}\n\n"
                "–ù–∞–∂–º–∏—Ç–µ üóëÔ∏è —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ:",
                reply_markup=kb
            )
        else:
            await callback.message.edit_text(
                f"‚úÖ –£–¥–∞–ª–µ–Ω–æ: <code>{eng}</code> ‚Üí <code>{rus_translation}</code>\n\n"
                "üìö –°–ª–æ–≤–∞—Ä—å —Ç–µ–ø–µ—Ä—å –ø—É—Å—Ç!",
                reply_markup=main_menu()
            )
    else:
        await callback.answer("‚ùå –°–ª–æ–≤–æ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ", show_alert=True)
    
    await callback.answer()

@dp.callback_query(F.data.startswith("show:"))
async def show_callback(callback: CallbackQuery):
    eng = callback.data.split(":", 1)[1]
    if eng in words:
        await callback.answer(f"üîç {eng} ‚Üí {words[eng]}", show_alert=True)
    else:
        await callback.answer("‚ùå –°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", show_alert=True)

@dp.callback_query(F.data.startswith("quiz"))
async def quiz_callback(callback: CallbackQuery):
    if len(words) < 2:
        await callback.message.edit_text(
            "‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!\n–î–æ–±–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –≤ —Å–ª–æ–≤–∞—Ä—å.",
            reply_markup=main_menu()
        )
        await callback.answer()
        return
    
    reverse = callback.data == "quiz_reverse"
    eng = random.choice(list(words.keys()))
    rus = words[eng]
    
    # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
    correct = rus if not reverse else eng
    options = [correct]
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    while len(options) < 4:
        random_word = random.choice(list(words.keys()))
        wrong_option = words[random_word] if not reverse else random_word
        if wrong_option not in options and wrong_option != correct:
            options.append(wrong_option)
    
    random.shuffle(options)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for option in options:
        kb.inline_keyboard.append([
            InlineKeyboardButton(text=option, callback_data=f"answer:{option}")
        ])
    
    kb.inline_keyboard.append([
        InlineKeyboardButton(text="üîô –û—Ç–º–µ–Ω–∞", callback_data="main_menu")
    ])
    
    question = eng if not reverse else rus
    question_type = "–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ" if reverse else "—Ä—É—Å—Å–∫–æ–≥–æ"
    
    await callback.message.edit_text(
        f"üéØ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ {question_type} —Å–ª–æ–≤–∞:\n\n<b>{question}</b>",
        reply_markup=kb
    )
    
    current_quiz[callback.from_user.id] = (eng, rus, reverse)
    await callback.answer()

@dp.callback_query(F.data.startswith("answer:"))
async def answer_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    if user_id not in current_quiz:
        await callback.answer("‚ùå –ö–≤–∏–∑ —É—Å—Ç–∞—Ä–µ–ª", show_alert=True)
        return
    
    user_answer = callback.data.split(":", 1)[1]
    eng, rus, reverse = current_quiz[user_id]
    correct = rus if not reverse else eng
    
    if user_answer == correct:
        response = f"‚úÖ –í–µ—Ä–Ω–æ!\n\n<b>{eng}</b> ‚Üí <i>{rus}</i>"
    else:
        response = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n\n‚úÖ <b>{eng}</b> ‚Üí <i>{rus}</i>"
    
    del current_quiz[user_id]
    await callback.message.edit_text(response, reply_markup=main_menu())
    await callback.answer()

# ------------------ WEB SERVER ------------------
async def health_check(request):
    return web.Response(text="ü§ñ Bot is running!")

async def start_web_server():
    app = web.Application()
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    
    runner = web.AppRunner(app)
    await runner.setup()
    
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()
    
    logger.info(f"üåê Web server started on port {port}")
    return app

# ------------------ –ó–ê–ü–£–°–ö ------------------
async def main():
    logger.info("üöÄ Starting bot...")
    
    # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("‚úÖ Webhook reset")
        await asyncio.sleep(2)
    except Exception as e:
        logger.error(f"‚ùå Webhook error: {e}")
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    await start_web_server()
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    logger.info("‚úÖ Starting polling...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
