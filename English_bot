import logging
import os
import random
import json
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import InputFile
from gtts import gTTS

# ------------------ –ù–ê–°–¢–†–û–ô–ö–ê ------------------
TOKEN = os.getenv("TOKEN")  # —Ç–æ–∫–µ–Ω –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
WORDS_FILE = "words.json"

# ------------------ –õ–û–ì–ò ------------------
logging.basicConfig(level=logging.INFO)

# ------------------ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ------------------
bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# ------------------ –ó–ê–ì–†–£–ó–ö–ê –°–õ–û–í–ê–†–Ø ------------------
if os.path.exists(WORDS_FILE):
    with open(WORDS_FILE, "r", encoding="utf-8") as f:
        words = json.load(f)
else:
    words = {}  # —Å—Ç—Ä—É–∫—Ç—É—Ä–∞: { "english": "—Ä—É—Å—Å–∫–∏–π" }

# ------------------ –°–û–•–†–ê–ù–ï–ù–ò–ï ------------------
def save_words():
    with open(WORDS_FILE, "w", encoding="utf-8") as f:
        json.dump(words, f, ensure_ascii=False, indent=2)

# ------------------ –ö–û–ú–ê–ù–î–´ ------------------
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await message.reply(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add - –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ\n"
        "/quiz - –∫–≤–∏–∑ (–∞–Ω–≥–ª ‚Üí —Ä—É—Å)\n"
        "/quiz_reverse - –∫–≤–∏–∑ (—Ä—É—Å ‚Üí –∞–Ω–≥–ª)\n"
        "/list - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–∞—Ä—å"
    )

# ------------------ –î–û–ë–ê–í–õ–ï–ù–ò–ï –°–õ–û–í ------------------
@dp.message_handler(commands=['add'])
async def add(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏ –ø–µ—Ä–µ–≤–æ–¥ —á–µ—Ä–µ–∑ –¥–µ—Ñ–∏—Å (–ø—Ä–∏–º–µ—Ä: apple-—è–±–ª–æ–∫–æ):")

    @dp.message_handler()
    async def receive_word(msg: types.Message):
        text = msg.text.strip()
        if "-" not in text:
            await msg.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ-—Ä—É—Å—Å–∫–∏–π")
            return
        eng, rus = text.split("-", 1)
        eng = eng.strip()
        rus = rus.strip()
        words[eng] = rus
        save_words()
        await msg.reply(f"–°–ª–æ–≤–æ '{eng}' ‚Üí '{rus}' –¥–æ–±–∞–≤–ª–µ–Ω–æ!")

# ------------------ –ü–†–û–°–ú–û–¢–† –°–õ–û–í–ê–†–Ø ------------------
@dp.message_handler(commands=['list'])
async def list_words(message: types.Message):
    if not words:
        await message.reply("–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç!")
        return
    reply = "\n".join([f"{eng} ‚Üí {rus}" for eng, rus in words.items()])
    await message.reply(reply)

# ------------------ –ö–í–ò–ó ------------------
async def send_quiz(message: types.Message, reverse=False):
    if len(words) < 2:
        await message.reply("–î–æ–±–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã 2 —Å–ª–æ–≤–∞ –¥–ª—è –∫–≤–∏–∑–∞!")
        return

    eng = random.choice(list(words.keys()))
    rus = words[eng]

    options = []
    correct = rus if not reverse else eng
    options.append(correct)
    while len(options) < 4:
        w = random.choice(list(words.keys()))
        val = w if reverse else words[w]
        if val not in options:
            options.append(val)
    random.shuffle(options)

    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        keyboard.add(opt)

    question = eng if not reverse else rus
    await message.reply(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥: {question}", reply_markup=keyboard)

    # –æ–∑–≤—É—á–∫–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ (—Ç–æ–ª—å–∫–æ –ø—Ä—è–º–æ–π –∫–≤–∏–∑)
    if not reverse:
        tts = gTTS(text=eng, lang='en')
        tts.save("word.mp3")
        await message.reply_voice(InputFile("word.mp3"))
        os.remove("word.mp3")

@dp.message_handler(commands=['quiz'])
async def quiz(message: types.Message):
    await send_quiz(message, reverse=False)

@dp.message_handler(commands=['quiz_reverse'])
async def quiz_reverse(message: types.Message):
    await send_quiz(message, reverse=True)

# ------------------ –ü–†–û–í–ï–†–ö–ê –û–¢–í–ï–¢–û–í ------------------
@dp.message_handler()
async def check_answer(message: types.Message):
    user_answer = message.text.strip()
    for eng, rus in words.items():
        if user_answer == rus or user_answer == eng:
            await message.reply(f"–í–µ—Ä–Ω–æ! '{eng}' ‚Üí '{rus}'")
            return
    await message.reply("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ üòï –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")

# ------------------ –ó–ê–ü–£–°–ö ------------------
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
